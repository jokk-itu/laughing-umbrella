version: "3.8"

networks:
  service_net:
  monitoring:
  databases:

services:
  sport_api:
    build:
      context: ./SportService
      dockerfile: Dockerfile
      args:
        - NUGET_API=${NUGET_API}
    ports:
      - "5000:80"
    depends_on:
      - eventbus
      - logger
      - prometheus
      - mssql
      - cache
    env_file:
      - ./EnvironmentFiles/logging.env
      - ./EnvironmentFiles/mssql.env
      - ./EnvironmentFiles/azuread.env
      - ./EnvironmentFiles/cache.env
      - ./EnvironmentFiles/ratelimit.env
      - ./EnvironmentFiles/sportsapi.env
    container_name: sport_api
    hostname: sport_api
    networks:
      - databases
      - service_net
      
  food_api:
    build:
      context: ./FoodService
      dockerfile: Dockerfile
      args:
        - NUGET_API=${NUGET_API}
    ports:
      - "5002:80"
    depends_on:
      - eventbus
      - logger
      - neo4j
      - cache
      - prometheus
    env_file:
      - ./EnvironmentFiles/logging.env
      - ./EnvironmentFiles/neo4j.env
      - ./EnvironmentFiles/azuread.env
      - ./EnvironmentFiles/cache.env
      - ./EnvironmentFiles/ratelimit.env  
      - ./EnvironmentFiles/foodapi.env
    container_name: food_api
    hostname: food_api
    networks:
      - databases
      - service_net
      
  book_api:
    build:
      context: ./BookService
      dockerfile: Dockerfile
      args:
        - NUGET_API=${NUGET_API}
    ports:
      - "5004:80"
    depends_on:
      - eventbus
      - logger
      - mongo
      - prometheus
      - cache
    env_file:
      - ./EnvironmentFiles/logging.env
      - ./EnvironmentFiles/mongo.env
      - ./EnvironmentFiles/azuread.env
      - ./EnvironmentFiles/cache.env
      - ./EnvironmentFiles/ratelimit.env  
      - ./EnvironmentFiles/booksapi.env
    container_name: book_api
    hostname: book_api
    networks:
      - databases
      - service_net       
  
  send_worker:
    build:
      context: ./Workers
      dockerfile: ./Send/Dockerfile 
    depends_on:
      - eventbus
    env_file:
      - ./EnvironmentFiles/eventbus.env   
    container_name: send_worker
    networks:
      - service_net
      
  receive_worker:
    build:
      context: ./Workers
      dockerfile: ./Receive/Dockerfile
    depends_on:
      - eventbus
      - statemachine
    env_file:
      - ./EnvironmentFiles/eventbus.env  
    container_name: receive_worker
    networks:
      - service_net                    

  client:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    ports:
      - "5020:5020"
    depends_on:
      - sport_api
      - food_api
      - book_api
    container_name: client
    networks:
      - service_net   
    
  logger:
    image: datalust/seq:latest
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
    container_name: logger
    hostname: logger
    networks:
      - service_net
          
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    container_name: prometheus
    hostname: prometheus
    volumes:
      - ./Monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - service_net
      - monitoring
          
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    container_name: grafana
    networks:
      - monitoring
       
  eventbus:
    image: rabbitmq:3.9-management
    hostname: eventbus
    container_name: eventbus
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - "./EventBus/enabled_plugins:/etc/rabbitmq/enabled_plugins"
      - "./EventBus/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf"
    networks:
      - service_net
      
  neo4j:
    build:
      context: ./Neo4j
      dockerfile: Dockerfile
    container_name: neo4j
    hostname: neo4j
    networks:
      - databases
    volumes:
      - ./Neo4j/data:/data
      - ./Neo4j/logs:/logs
      - ./Neo4j/import:/var/lib/neo4j/import
      - ./Neo4j/plugins:/plugins
    ports:
      - "7474:7474"
      - "7687:7687"
      
  mongo:
    image: mongo:5.0.1-focal
    container_name: mongo
    hostname: mongo
    networks:
      - databases
    volumes:
      - ./Mongo/data:/data/db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: test
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin  
      
  cache:
    image: redis:6.2.5-alpine
    container_name: cache
    hostname: cache
    networks:
      - databases
    ports:
      - "6370:6379"
    volumes:
     - "./Redis/redis.conf:/usr/local/etc/redis/redis.conf"
     
  ratelimit:
    image: redis:6.2.5-alpine
    container_name: ratelimit
    hostname: ratelimit
    networks:
      - databases
    ports:
      - "6371:6379"
    volumes:
     - "./Redis/redis.conf:/usr/local/etc/redis/redis.conf"
     
  statemachine:
    image: redis:6.2.5-alpine
    container_name: statemachine
    hostname: statemachine
    networks:
      - databases
    ports:
      - "6372:6379"
    volumes:
     - "./Redis/redis.conf:/usr/local/etc/redis/redis.conf"      
     
  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    hostname: mssql
    container_name: mssql
    environment:
      -  ACCEPT_EULA=Y
      -  SA_PASSWORD=Password12!
    ports:
      - "1433:1433"
    volumes:
      - ./MSSQL/data:/var/opt/mssql/data
      - ./MSSQL/log:/var/opt/mssql/log
      - ./MSSQL/secrets:/var/opt/mssql/secrets
    networks:
      - databases  
